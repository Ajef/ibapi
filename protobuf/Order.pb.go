// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: Order.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// order ids
	ClientId *int32 `protobuf:"varint,1,opt,name=clientId,proto3,oneof" json:"clientId,omitempty"`
	OrderId  *int32 `protobuf:"varint,2,opt,name=orderId,proto3,oneof" json:"orderId,omitempty"`
	PermId   *int64 `protobuf:"varint,3,opt,name=permId,proto3,oneof" json:"permId,omitempty"`
	ParentId *int32 `protobuf:"varint,4,opt,name=parentId,proto3,oneof" json:"parentId,omitempty"`
	// primary attributes
	Action        *string  `protobuf:"bytes,5,opt,name=action,proto3,oneof" json:"action,omitempty"`
	TotalQuantity *string  `protobuf:"bytes,6,opt,name=totalQuantity,proto3,oneof" json:"totalQuantity,omitempty"`
	DisplaySize   *int32   `protobuf:"varint,7,opt,name=displaySize,proto3,oneof" json:"displaySize,omitempty"`
	OrderType     *string  `protobuf:"bytes,8,opt,name=orderType,proto3,oneof" json:"orderType,omitempty"`
	LmtPrice      *float64 `protobuf:"fixed64,9,opt,name=lmtPrice,proto3,oneof" json:"lmtPrice,omitempty"`
	AuxPrice      *float64 `protobuf:"fixed64,10,opt,name=auxPrice,proto3,oneof" json:"auxPrice,omitempty"`
	Tif           *string  `protobuf:"bytes,11,opt,name=tif,proto3,oneof" json:"tif,omitempty"`
	// clearing info
	Account         *string `protobuf:"bytes,12,opt,name=account,proto3,oneof" json:"account,omitempty"`
	SettlingFirm    *string `protobuf:"bytes,13,opt,name=settlingFirm,proto3,oneof" json:"settlingFirm,omitempty"`
	ClearingAccount *string `protobuf:"bytes,14,opt,name=clearingAccount,proto3,oneof" json:"clearingAccount,omitempty"`
	ClearingIntent  *string `protobuf:"bytes,15,opt,name=clearingIntent,proto3,oneof" json:"clearingIntent,omitempty"`
	// secondary attributes
	AllOrNone       *bool    `protobuf:"varint,16,opt,name=allOrNone,proto3,oneof" json:"allOrNone,omitempty"`
	BlockOrder      *bool    `protobuf:"varint,17,opt,name=blockOrder,proto3,oneof" json:"blockOrder,omitempty"`
	Hidden          *bool    `protobuf:"varint,18,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	OutsideRth      *bool    `protobuf:"varint,19,opt,name=outsideRth,proto3,oneof" json:"outsideRth,omitempty"`
	SweepToFill     *bool    `protobuf:"varint,20,opt,name=sweepToFill,proto3,oneof" json:"sweepToFill,omitempty"`
	PercentOffset   *float64 `protobuf:"fixed64,21,opt,name=percentOffset,proto3,oneof" json:"percentOffset,omitempty"`
	TrailingPercent *float64 `protobuf:"fixed64,22,opt,name=trailingPercent,proto3,oneof" json:"trailingPercent,omitempty"`
	TrailStopPrice  *float64 `protobuf:"fixed64,23,opt,name=trailStopPrice,proto3,oneof" json:"trailStopPrice,omitempty"`
	MinQty          *int32   `protobuf:"varint,24,opt,name=minQty,proto3,oneof" json:"minQty,omitempty"`
	GoodAfterTime   *string  `protobuf:"bytes,25,opt,name=goodAfterTime,proto3,oneof" json:"goodAfterTime,omitempty"`
	GoodTillDate    *string  `protobuf:"bytes,26,opt,name=goodTillDate,proto3,oneof" json:"goodTillDate,omitempty"`
	OcaGroup        *string  `protobuf:"bytes,27,opt,name=ocaGroup,proto3,oneof" json:"ocaGroup,omitempty"`
	OrderRef        *string  `protobuf:"bytes,28,opt,name=orderRef,proto3,oneof" json:"orderRef,omitempty"`
	Rule80A         *string  `protobuf:"bytes,29,opt,name=rule80A,proto3,oneof" json:"rule80A,omitempty"`
	OcaType         *int32   `protobuf:"varint,30,opt,name=ocaType,proto3,oneof" json:"ocaType,omitempty"`
	TriggerMethod   *int32   `protobuf:"varint,31,opt,name=triggerMethod,proto3,oneof" json:"triggerMethod,omitempty"`
	// extended order fields
	ActiveStartTime *string `protobuf:"bytes,32,opt,name=activeStartTime,proto3,oneof" json:"activeStartTime,omitempty"`
	ActiveStopTime  *string `protobuf:"bytes,33,opt,name=activeStopTime,proto3,oneof" json:"activeStopTime,omitempty"`
	// advisor allocation orders
	FaGroup      *string `protobuf:"bytes,34,opt,name=faGroup,proto3,oneof" json:"faGroup,omitempty"`
	FaMethod     *string `protobuf:"bytes,35,opt,name=faMethod,proto3,oneof" json:"faMethod,omitempty"`
	FaPercentage *string `protobuf:"bytes,36,opt,name=faPercentage,proto3,oneof" json:"faPercentage,omitempty"`
	// volatility orders
	Volatility                     *float64 `protobuf:"fixed64,37,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	VolatilityType                 *int32   `protobuf:"varint,38,opt,name=volatilityType,proto3,oneof" json:"volatilityType,omitempty"`
	ContinuousUpdate               *bool    `protobuf:"varint,39,opt,name=continuousUpdate,proto3,oneof" json:"continuousUpdate,omitempty"`
	ReferencePriceType             *int32   `protobuf:"varint,40,opt,name=referencePriceType,proto3,oneof" json:"referencePriceType,omitempty"`
	DeltaNeutralOrderType          *string  `protobuf:"bytes,41,opt,name=deltaNeutralOrderType,proto3,oneof" json:"deltaNeutralOrderType,omitempty"`
	DeltaNeutralAuxPrice           *float64 `protobuf:"fixed64,42,opt,name=deltaNeutralAuxPrice,proto3,oneof" json:"deltaNeutralAuxPrice,omitempty"`
	DeltaNeutralConId              *int32   `protobuf:"varint,43,opt,name=deltaNeutralConId,proto3,oneof" json:"deltaNeutralConId,omitempty"`
	DeltaNeutralOpenClose          *string  `protobuf:"bytes,44,opt,name=deltaNeutralOpenClose,proto3,oneof" json:"deltaNeutralOpenClose,omitempty"`
	DeltaNeutralShortSale          *bool    `protobuf:"varint,45,opt,name=deltaNeutralShortSale,proto3,oneof" json:"deltaNeutralShortSale,omitempty"`
	DeltaNeutralShortSaleSlot      *int32   `protobuf:"varint,46,opt,name=deltaNeutralShortSaleSlot,proto3,oneof" json:"deltaNeutralShortSaleSlot,omitempty"`
	DeltaNeutralDesignatedLocation *string  `protobuf:"bytes,47,opt,name=deltaNeutralDesignatedLocation,proto3,oneof" json:"deltaNeutralDesignatedLocation,omitempty"`
	// scale orders
	ScaleInitLevelSize       *int32   `protobuf:"varint,48,opt,name=scaleInitLevelSize,proto3,oneof" json:"scaleInitLevelSize,omitempty"`
	ScaleSubsLevelSize       *int32   `protobuf:"varint,49,opt,name=scaleSubsLevelSize,proto3,oneof" json:"scaleSubsLevelSize,omitempty"`
	ScalePriceIncrement      *float64 `protobuf:"fixed64,50,opt,name=scalePriceIncrement,proto3,oneof" json:"scalePriceIncrement,omitempty"`
	ScalePriceAdjustValue    *float64 `protobuf:"fixed64,51,opt,name=scalePriceAdjustValue,proto3,oneof" json:"scalePriceAdjustValue,omitempty"`
	ScalePriceAdjustInterval *int32   `protobuf:"varint,52,opt,name=scalePriceAdjustInterval,proto3,oneof" json:"scalePriceAdjustInterval,omitempty"`
	ScaleProfitOffset        *float64 `protobuf:"fixed64,53,opt,name=scaleProfitOffset,proto3,oneof" json:"scaleProfitOffset,omitempty"`
	ScaleAutoReset           *bool    `protobuf:"varint,54,opt,name=scaleAutoReset,proto3,oneof" json:"scaleAutoReset,omitempty"`
	ScaleInitPosition        *int32   `protobuf:"varint,55,opt,name=scaleInitPosition,proto3,oneof" json:"scaleInitPosition,omitempty"`
	ScaleInitFillQty         *int32   `protobuf:"varint,56,opt,name=scaleInitFillQty,proto3,oneof" json:"scaleInitFillQty,omitempty"`
	ScaleRandomPercent       *bool    `protobuf:"varint,57,opt,name=scaleRandomPercent,proto3,oneof" json:"scaleRandomPercent,omitempty"`
	ScaleTable               *string  `protobuf:"bytes,58,opt,name=scaleTable,proto3,oneof" json:"scaleTable,omitempty"`
	// hedge orders
	HedgeType  *string `protobuf:"bytes,59,opt,name=hedgeType,proto3,oneof" json:"hedgeType,omitempty"`
	HedgeParam *string `protobuf:"bytes,60,opt,name=hedgeParam,proto3,oneof" json:"hedgeParam,omitempty"`
	// algo orders
	AlgoStrategy *string           `protobuf:"bytes,61,opt,name=algoStrategy,proto3,oneof" json:"algoStrategy,omitempty"`
	AlgoParams   map[string]string `protobuf:"bytes,62,rep,name=algoParams,proto3" json:"algoParams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AlgoId       *string           `protobuf:"bytes,63,opt,name=algoId,proto3,oneof" json:"algoId,omitempty"`
	// combo orders
	SmartComboRoutingParams map[string]string `protobuf:"bytes,64,rep,name=smartComboRoutingParams,proto3" json:"smartComboRoutingParams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// processing control
	WhatIf                        *bool `protobuf:"varint,65,opt,name=whatIf,proto3,oneof" json:"whatIf,omitempty"`
	Transmit                      *bool `protobuf:"varint,66,opt,name=transmit,proto3,oneof" json:"transmit,omitempty"`
	OverridePercentageConstraints *bool `protobuf:"varint,67,opt,name=overridePercentageConstraints,proto3,oneof" json:"overridePercentageConstraints,omitempty"`
	// Institutional orders only
	OpenClose                   *string `protobuf:"bytes,68,opt,name=openClose,proto3,oneof" json:"openClose,omitempty"`
	Origin                      *int32  `protobuf:"varint,69,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	ShortSaleSlot               *int32  `protobuf:"varint,70,opt,name=shortSaleSlot,proto3,oneof" json:"shortSaleSlot,omitempty"`
	DesignatedLocation          *string `protobuf:"bytes,71,opt,name=designatedLocation,proto3,oneof" json:"designatedLocation,omitempty"`
	ExemptCode                  *int32  `protobuf:"varint,72,opt,name=exemptCode,proto3,oneof" json:"exemptCode,omitempty"`
	DeltaNeutralSettlingFirm    *string `protobuf:"bytes,73,opt,name=deltaNeutralSettlingFirm,proto3,oneof" json:"deltaNeutralSettlingFirm,omitempty"`
	DeltaNeutralClearingAccount *string `protobuf:"bytes,74,opt,name=deltaNeutralClearingAccount,proto3,oneof" json:"deltaNeutralClearingAccount,omitempty"`
	DeltaNeutralClearingIntent  *string `protobuf:"bytes,75,opt,name=deltaNeutralClearingIntent,proto3,oneof" json:"deltaNeutralClearingIntent,omitempty"`
	// SMART routing only
	DiscretionaryAmt   *float64 `protobuf:"fixed64,76,opt,name=discretionaryAmt,proto3,oneof" json:"discretionaryAmt,omitempty"`
	OptOutSmartRouting *bool    `protobuf:"varint,77,opt,name=optOutSmartRouting,proto3,oneof" json:"optOutSmartRouting,omitempty"`
	// BOX ORDERS ONLY
	StartingPrice *float64 `protobuf:"fixed64,78,opt,name=startingPrice,proto3,oneof" json:"startingPrice,omitempty"`
	StockRefPrice *float64 `protobuf:"fixed64,79,opt,name=stockRefPrice,proto3,oneof" json:"stockRefPrice,omitempty"`
	Delta         *float64 `protobuf:"fixed64,80,opt,name=delta,proto3,oneof" json:"delta,omitempty"`
	// pegged to stock or VOL orders
	StockRangeLower *float64 `protobuf:"fixed64,81,opt,name=stockRangeLower,proto3,oneof" json:"stockRangeLower,omitempty"`
	StockRangeUpper *float64 `protobuf:"fixed64,82,opt,name=stockRangeUpper,proto3,oneof" json:"stockRangeUpper,omitempty"`
	// Not Held
	NotHeld *bool `protobuf:"varint,83,opt,name=notHeld,proto3,oneof" json:"notHeld,omitempty"`
	// order misc options
	OrderMiscOptions map[string]string `protobuf:"bytes,84,rep,name=orderMiscOptions,proto3" json:"orderMiscOptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// order algo id
	Solicited      *bool `protobuf:"varint,85,opt,name=solicited,proto3,oneof" json:"solicited,omitempty"`
	RandomizeSize  *bool `protobuf:"varint,86,opt,name=randomizeSize,proto3,oneof" json:"randomizeSize,omitempty"`
	RandomizePrice *bool `protobuf:"varint,87,opt,name=randomizePrice,proto3,oneof" json:"randomizePrice,omitempty"`
	// PEG2BENCH fields
	ReferenceContractId          *int32            `protobuf:"varint,88,opt,name=referenceContractId,proto3,oneof" json:"referenceContractId,omitempty"`
	PeggedChangeAmount           *float64          `protobuf:"fixed64,89,opt,name=peggedChangeAmount,proto3,oneof" json:"peggedChangeAmount,omitempty"`
	IsPeggedChangeAmountDecrease *bool             `protobuf:"varint,90,opt,name=isPeggedChangeAmountDecrease,proto3,oneof" json:"isPeggedChangeAmountDecrease,omitempty"`
	ReferenceChangeAmount        *float64          `protobuf:"fixed64,91,opt,name=referenceChangeAmount,proto3,oneof" json:"referenceChangeAmount,omitempty"`
	ReferenceExchangeId          *string           `protobuf:"bytes,92,opt,name=referenceExchangeId,proto3,oneof" json:"referenceExchangeId,omitempty"`
	AdjustedOrderType            *string           `protobuf:"bytes,93,opt,name=adjustedOrderType,proto3,oneof" json:"adjustedOrderType,omitempty"`
	TriggerPrice                 *float64          `protobuf:"fixed64,94,opt,name=triggerPrice,proto3,oneof" json:"triggerPrice,omitempty"`
	AdjustedStopPrice            *float64          `protobuf:"fixed64,95,opt,name=adjustedStopPrice,proto3,oneof" json:"adjustedStopPrice,omitempty"`
	AdjustedStopLimitPrice       *float64          `protobuf:"fixed64,96,opt,name=adjustedStopLimitPrice,proto3,oneof" json:"adjustedStopLimitPrice,omitempty"`
	AdjustedTrailingAmount       *float64          `protobuf:"fixed64,97,opt,name=adjustedTrailingAmount,proto3,oneof" json:"adjustedTrailingAmount,omitempty"`
	AdjustableTrailingUnit       *int32            `protobuf:"varint,98,opt,name=adjustableTrailingUnit,proto3,oneof" json:"adjustableTrailingUnit,omitempty"`
	LmtPriceOffset               *float64          `protobuf:"fixed64,99,opt,name=lmtPriceOffset,proto3,oneof" json:"lmtPriceOffset,omitempty"`
	Conditions                   []*OrderCondition `protobuf:"bytes,100,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsCancelOrder        *bool             `protobuf:"varint,101,opt,name=conditionsCancelOrder,proto3,oneof" json:"conditionsCancelOrder,omitempty"`
	ConditionsIgnoreRth          *bool             `protobuf:"varint,102,opt,name=conditionsIgnoreRth,proto3,oneof" json:"conditionsIgnoreRth,omitempty"`
	// models
	ModelCode      *string         `protobuf:"bytes,103,opt,name=modelCode,proto3,oneof" json:"modelCode,omitempty"`
	ExtOperator    *string         `protobuf:"bytes,104,opt,name=extOperator,proto3,oneof" json:"extOperator,omitempty"`
	SoftDollarTier *SoftDollarTier `protobuf:"bytes,105,opt,name=softDollarTier,proto3,oneof" json:"softDollarTier,omitempty"`
	// native cash quantity
	CashQty               *float64 `protobuf:"fixed64,106,opt,name=cashQty,proto3,oneof" json:"cashQty,omitempty"`
	Mifid2DecisionMaker   *string  `protobuf:"bytes,107,opt,name=mifid2DecisionMaker,proto3,oneof" json:"mifid2DecisionMaker,omitempty"`
	Mifid2DecisionAlgo    *string  `protobuf:"bytes,108,opt,name=mifid2DecisionAlgo,proto3,oneof" json:"mifid2DecisionAlgo,omitempty"`
	Mifid2ExecutionTrader *string  `protobuf:"bytes,109,opt,name=mifid2ExecutionTrader,proto3,oneof" json:"mifid2ExecutionTrader,omitempty"`
	Mifid2ExecutionAlgo   *string  `protobuf:"bytes,110,opt,name=mifid2ExecutionAlgo,proto3,oneof" json:"mifid2ExecutionAlgo,omitempty"`
	// don't use auto price for hedge
	DontUseAutoPriceForHedge    *bool    `protobuf:"varint,111,opt,name=dontUseAutoPriceForHedge,proto3,oneof" json:"dontUseAutoPriceForHedge,omitempty"`
	IsOmsContainer              *bool    `protobuf:"varint,112,opt,name=isOmsContainer,proto3,oneof" json:"isOmsContainer,omitempty"`
	DiscretionaryUpToLimitPrice *bool    `protobuf:"varint,113,opt,name=discretionaryUpToLimitPrice,proto3,oneof" json:"discretionaryUpToLimitPrice,omitempty"`
	AutoCancelDate              *string  `protobuf:"bytes,114,opt,name=autoCancelDate,proto3,oneof" json:"autoCancelDate,omitempty"`
	FilledQuantity              *string  `protobuf:"bytes,115,opt,name=filledQuantity,proto3,oneof" json:"filledQuantity,omitempty"`
	RefFuturesConId             *int32   `protobuf:"varint,116,opt,name=refFuturesConId,proto3,oneof" json:"refFuturesConId,omitempty"`
	AutoCancelParent            *bool    `protobuf:"varint,117,opt,name=autoCancelParent,proto3,oneof" json:"autoCancelParent,omitempty"`
	Shareholder                 *string  `protobuf:"bytes,118,opt,name=shareholder,proto3,oneof" json:"shareholder,omitempty"`
	ImbalanceOnly               *bool    `protobuf:"varint,119,opt,name=imbalanceOnly,proto3,oneof" json:"imbalanceOnly,omitempty"`
	RouteMarketableToBbo        *bool    `protobuf:"varint,120,opt,name=routeMarketableToBbo,proto3,oneof" json:"routeMarketableToBbo,omitempty"`
	ParentPermId                *int64   `protobuf:"varint,121,opt,name=parentPermId,proto3,oneof" json:"parentPermId,omitempty"`
	UsePriceMgmtAlgo            *int32   `protobuf:"varint,122,opt,name=usePriceMgmtAlgo,proto3,oneof" json:"usePriceMgmtAlgo,omitempty"`
	Duration                    *int32   `protobuf:"varint,123,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	PostToAts                   *int32   `protobuf:"varint,124,opt,name=postToAts,proto3,oneof" json:"postToAts,omitempty"`
	AdvancedErrorOverride       *string  `protobuf:"bytes,125,opt,name=advancedErrorOverride,proto3,oneof" json:"advancedErrorOverride,omitempty"`
	ManualOrderTime             *string  `protobuf:"bytes,126,opt,name=manualOrderTime,proto3,oneof" json:"manualOrderTime,omitempty"`
	MinTradeQty                 *int32   `protobuf:"varint,127,opt,name=minTradeQty,proto3,oneof" json:"minTradeQty,omitempty"`
	MinCompeteSize              *int32   `protobuf:"varint,128,opt,name=minCompeteSize,proto3,oneof" json:"minCompeteSize,omitempty"`
	CompeteAgainstBestOffset    *float64 `protobuf:"fixed64,129,opt,name=competeAgainstBestOffset,proto3,oneof" json:"competeAgainstBestOffset,omitempty"`
	MidOffsetAtWhole            *float64 `protobuf:"fixed64,130,opt,name=midOffsetAtWhole,proto3,oneof" json:"midOffsetAtWhole,omitempty"`
	MidOffsetAtHalf             *float64 `protobuf:"fixed64,131,opt,name=midOffsetAtHalf,proto3,oneof" json:"midOffsetAtHalf,omitempty"`
	CustomerAccount             *string  `protobuf:"bytes,132,opt,name=customerAccount,proto3,oneof" json:"customerAccount,omitempty"`
	ProfessionalCustomer        *bool    `protobuf:"varint,133,opt,name=professionalCustomer,proto3,oneof" json:"professionalCustomer,omitempty"`
	BondAccruedInterest         *string  `protobuf:"bytes,134,opt,name=bondAccruedInterest,proto3,oneof" json:"bondAccruedInterest,omitempty"`
	IncludeOvernight            *bool    `protobuf:"varint,135,opt,name=includeOvernight,proto3,oneof" json:"includeOvernight,omitempty"`
	ManualOrderIndicator        *int32   `protobuf:"varint,136,opt,name=manualOrderIndicator,proto3,oneof" json:"manualOrderIndicator,omitempty"`
	Submitter                   *string  `protobuf:"bytes,137,opt,name=submitter,proto3,oneof" json:"submitter,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_Order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_Order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_Order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetClientId() int32 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *Order) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *Order) GetPermId() int64 {
	if x != nil && x.PermId != nil {
		return *x.PermId
	}
	return 0
}

func (x *Order) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *Order) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *Order) GetTotalQuantity() string {
	if x != nil && x.TotalQuantity != nil {
		return *x.TotalQuantity
	}
	return ""
}

func (x *Order) GetDisplaySize() int32 {
	if x != nil && x.DisplaySize != nil {
		return *x.DisplaySize
	}
	return 0
}

func (x *Order) GetOrderType() string {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ""
}

func (x *Order) GetLmtPrice() float64 {
	if x != nil && x.LmtPrice != nil {
		return *x.LmtPrice
	}
	return 0
}

func (x *Order) GetAuxPrice() float64 {
	if x != nil && x.AuxPrice != nil {
		return *x.AuxPrice
	}
	return 0
}

func (x *Order) GetTif() string {
	if x != nil && x.Tif != nil {
		return *x.Tif
	}
	return ""
}

func (x *Order) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *Order) GetSettlingFirm() string {
	if x != nil && x.SettlingFirm != nil {
		return *x.SettlingFirm
	}
	return ""
}

func (x *Order) GetClearingAccount() string {
	if x != nil && x.ClearingAccount != nil {
		return *x.ClearingAccount
	}
	return ""
}

func (x *Order) GetClearingIntent() string {
	if x != nil && x.ClearingIntent != nil {
		return *x.ClearingIntent
	}
	return ""
}

func (x *Order) GetAllOrNone() bool {
	if x != nil && x.AllOrNone != nil {
		return *x.AllOrNone
	}
	return false
}

func (x *Order) GetBlockOrder() bool {
	if x != nil && x.BlockOrder != nil {
		return *x.BlockOrder
	}
	return false
}

func (x *Order) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *Order) GetOutsideRth() bool {
	if x != nil && x.OutsideRth != nil {
		return *x.OutsideRth
	}
	return false
}

func (x *Order) GetSweepToFill() bool {
	if x != nil && x.SweepToFill != nil {
		return *x.SweepToFill
	}
	return false
}

func (x *Order) GetPercentOffset() float64 {
	if x != nil && x.PercentOffset != nil {
		return *x.PercentOffset
	}
	return 0
}

func (x *Order) GetTrailingPercent() float64 {
	if x != nil && x.TrailingPercent != nil {
		return *x.TrailingPercent
	}
	return 0
}

func (x *Order) GetTrailStopPrice() float64 {
	if x != nil && x.TrailStopPrice != nil {
		return *x.TrailStopPrice
	}
	return 0
}

func (x *Order) GetMinQty() int32 {
	if x != nil && x.MinQty != nil {
		return *x.MinQty
	}
	return 0
}

func (x *Order) GetGoodAfterTime() string {
	if x != nil && x.GoodAfterTime != nil {
		return *x.GoodAfterTime
	}
	return ""
}

func (x *Order) GetGoodTillDate() string {
	if x != nil && x.GoodTillDate != nil {
		return *x.GoodTillDate
	}
	return ""
}

func (x *Order) GetOcaGroup() string {
	if x != nil && x.OcaGroup != nil {
		return *x.OcaGroup
	}
	return ""
}

func (x *Order) GetOrderRef() string {
	if x != nil && x.OrderRef != nil {
		return *x.OrderRef
	}
	return ""
}

func (x *Order) GetRule80A() string {
	if x != nil && x.Rule80A != nil {
		return *x.Rule80A
	}
	return ""
}

func (x *Order) GetOcaType() int32 {
	if x != nil && x.OcaType != nil {
		return *x.OcaType
	}
	return 0
}

func (x *Order) GetTriggerMethod() int32 {
	if x != nil && x.TriggerMethod != nil {
		return *x.TriggerMethod
	}
	return 0
}

func (x *Order) GetActiveStartTime() string {
	if x != nil && x.ActiveStartTime != nil {
		return *x.ActiveStartTime
	}
	return ""
}

func (x *Order) GetActiveStopTime() string {
	if x != nil && x.ActiveStopTime != nil {
		return *x.ActiveStopTime
	}
	return ""
}

func (x *Order) GetFaGroup() string {
	if x != nil && x.FaGroup != nil {
		return *x.FaGroup
	}
	return ""
}

func (x *Order) GetFaMethod() string {
	if x != nil && x.FaMethod != nil {
		return *x.FaMethod
	}
	return ""
}

func (x *Order) GetFaPercentage() string {
	if x != nil && x.FaPercentage != nil {
		return *x.FaPercentage
	}
	return ""
}

func (x *Order) GetVolatility() float64 {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return 0
}

func (x *Order) GetVolatilityType() int32 {
	if x != nil && x.VolatilityType != nil {
		return *x.VolatilityType
	}
	return 0
}

func (x *Order) GetContinuousUpdate() bool {
	if x != nil && x.ContinuousUpdate != nil {
		return *x.ContinuousUpdate
	}
	return false
}

func (x *Order) GetReferencePriceType() int32 {
	if x != nil && x.ReferencePriceType != nil {
		return *x.ReferencePriceType
	}
	return 0
}

func (x *Order) GetDeltaNeutralOrderType() string {
	if x != nil && x.DeltaNeutralOrderType != nil {
		return *x.DeltaNeutralOrderType
	}
	return ""
}

func (x *Order) GetDeltaNeutralAuxPrice() float64 {
	if x != nil && x.DeltaNeutralAuxPrice != nil {
		return *x.DeltaNeutralAuxPrice
	}
	return 0
}

func (x *Order) GetDeltaNeutralConId() int32 {
	if x != nil && x.DeltaNeutralConId != nil {
		return *x.DeltaNeutralConId
	}
	return 0
}

func (x *Order) GetDeltaNeutralOpenClose() string {
	if x != nil && x.DeltaNeutralOpenClose != nil {
		return *x.DeltaNeutralOpenClose
	}
	return ""
}

func (x *Order) GetDeltaNeutralShortSale() bool {
	if x != nil && x.DeltaNeutralShortSale != nil {
		return *x.DeltaNeutralShortSale
	}
	return false
}

func (x *Order) GetDeltaNeutralShortSaleSlot() int32 {
	if x != nil && x.DeltaNeutralShortSaleSlot != nil {
		return *x.DeltaNeutralShortSaleSlot
	}
	return 0
}

func (x *Order) GetDeltaNeutralDesignatedLocation() string {
	if x != nil && x.DeltaNeutralDesignatedLocation != nil {
		return *x.DeltaNeutralDesignatedLocation
	}
	return ""
}

func (x *Order) GetScaleInitLevelSize() int32 {
	if x != nil && x.ScaleInitLevelSize != nil {
		return *x.ScaleInitLevelSize
	}
	return 0
}

func (x *Order) GetScaleSubsLevelSize() int32 {
	if x != nil && x.ScaleSubsLevelSize != nil {
		return *x.ScaleSubsLevelSize
	}
	return 0
}

func (x *Order) GetScalePriceIncrement() float64 {
	if x != nil && x.ScalePriceIncrement != nil {
		return *x.ScalePriceIncrement
	}
	return 0
}

func (x *Order) GetScalePriceAdjustValue() float64 {
	if x != nil && x.ScalePriceAdjustValue != nil {
		return *x.ScalePriceAdjustValue
	}
	return 0
}

func (x *Order) GetScalePriceAdjustInterval() int32 {
	if x != nil && x.ScalePriceAdjustInterval != nil {
		return *x.ScalePriceAdjustInterval
	}
	return 0
}

func (x *Order) GetScaleProfitOffset() float64 {
	if x != nil && x.ScaleProfitOffset != nil {
		return *x.ScaleProfitOffset
	}
	return 0
}

func (x *Order) GetScaleAutoReset() bool {
	if x != nil && x.ScaleAutoReset != nil {
		return *x.ScaleAutoReset
	}
	return false
}

func (x *Order) GetScaleInitPosition() int32 {
	if x != nil && x.ScaleInitPosition != nil {
		return *x.ScaleInitPosition
	}
	return 0
}

func (x *Order) GetScaleInitFillQty() int32 {
	if x != nil && x.ScaleInitFillQty != nil {
		return *x.ScaleInitFillQty
	}
	return 0
}

func (x *Order) GetScaleRandomPercent() bool {
	if x != nil && x.ScaleRandomPercent != nil {
		return *x.ScaleRandomPercent
	}
	return false
}

func (x *Order) GetScaleTable() string {
	if x != nil && x.ScaleTable != nil {
		return *x.ScaleTable
	}
	return ""
}

func (x *Order) GetHedgeType() string {
	if x != nil && x.HedgeType != nil {
		return *x.HedgeType
	}
	return ""
}

func (x *Order) GetHedgeParam() string {
	if x != nil && x.HedgeParam != nil {
		return *x.HedgeParam
	}
	return ""
}

func (x *Order) GetAlgoStrategy() string {
	if x != nil && x.AlgoStrategy != nil {
		return *x.AlgoStrategy
	}
	return ""
}

func (x *Order) GetAlgoParams() map[string]string {
	if x != nil {
		return x.AlgoParams
	}
	return nil
}

func (x *Order) GetAlgoId() string {
	if x != nil && x.AlgoId != nil {
		return *x.AlgoId
	}
	return ""
}

func (x *Order) GetSmartComboRoutingParams() map[string]string {
	if x != nil {
		return x.SmartComboRoutingParams
	}
	return nil
}

func (x *Order) GetWhatIf() bool {
	if x != nil && x.WhatIf != nil {
		return *x.WhatIf
	}
	return false
}

func (x *Order) GetTransmit() bool {
	if x != nil && x.Transmit != nil {
		return *x.Transmit
	}
	return false
}

func (x *Order) GetOverridePercentageConstraints() bool {
	if x != nil && x.OverridePercentageConstraints != nil {
		return *x.OverridePercentageConstraints
	}
	return false
}

func (x *Order) GetOpenClose() string {
	if x != nil && x.OpenClose != nil {
		return *x.OpenClose
	}
	return ""
}

func (x *Order) GetOrigin() int32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *Order) GetShortSaleSlot() int32 {
	if x != nil && x.ShortSaleSlot != nil {
		return *x.ShortSaleSlot
	}
	return 0
}

func (x *Order) GetDesignatedLocation() string {
	if x != nil && x.DesignatedLocation != nil {
		return *x.DesignatedLocation
	}
	return ""
}

func (x *Order) GetExemptCode() int32 {
	if x != nil && x.ExemptCode != nil {
		return *x.ExemptCode
	}
	return 0
}

func (x *Order) GetDeltaNeutralSettlingFirm() string {
	if x != nil && x.DeltaNeutralSettlingFirm != nil {
		return *x.DeltaNeutralSettlingFirm
	}
	return ""
}

func (x *Order) GetDeltaNeutralClearingAccount() string {
	if x != nil && x.DeltaNeutralClearingAccount != nil {
		return *x.DeltaNeutralClearingAccount
	}
	return ""
}

func (x *Order) GetDeltaNeutralClearingIntent() string {
	if x != nil && x.DeltaNeutralClearingIntent != nil {
		return *x.DeltaNeutralClearingIntent
	}
	return ""
}

func (x *Order) GetDiscretionaryAmt() float64 {
	if x != nil && x.DiscretionaryAmt != nil {
		return *x.DiscretionaryAmt
	}
	return 0
}

func (x *Order) GetOptOutSmartRouting() bool {
	if x != nil && x.OptOutSmartRouting != nil {
		return *x.OptOutSmartRouting
	}
	return false
}

func (x *Order) GetStartingPrice() float64 {
	if x != nil && x.StartingPrice != nil {
		return *x.StartingPrice
	}
	return 0
}

func (x *Order) GetStockRefPrice() float64 {
	if x != nil && x.StockRefPrice != nil {
		return *x.StockRefPrice
	}
	return 0
}

func (x *Order) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *Order) GetStockRangeLower() float64 {
	if x != nil && x.StockRangeLower != nil {
		return *x.StockRangeLower
	}
	return 0
}

func (x *Order) GetStockRangeUpper() float64 {
	if x != nil && x.StockRangeUpper != nil {
		return *x.StockRangeUpper
	}
	return 0
}

func (x *Order) GetNotHeld() bool {
	if x != nil && x.NotHeld != nil {
		return *x.NotHeld
	}
	return false
}

func (x *Order) GetOrderMiscOptions() map[string]string {
	if x != nil {
		return x.OrderMiscOptions
	}
	return nil
}

func (x *Order) GetSolicited() bool {
	if x != nil && x.Solicited != nil {
		return *x.Solicited
	}
	return false
}

func (x *Order) GetRandomizeSize() bool {
	if x != nil && x.RandomizeSize != nil {
		return *x.RandomizeSize
	}
	return false
}

func (x *Order) GetRandomizePrice() bool {
	if x != nil && x.RandomizePrice != nil {
		return *x.RandomizePrice
	}
	return false
}

func (x *Order) GetReferenceContractId() int32 {
	if x != nil && x.ReferenceContractId != nil {
		return *x.ReferenceContractId
	}
	return 0
}

func (x *Order) GetPeggedChangeAmount() float64 {
	if x != nil && x.PeggedChangeAmount != nil {
		return *x.PeggedChangeAmount
	}
	return 0
}

func (x *Order) GetIsPeggedChangeAmountDecrease() bool {
	if x != nil && x.IsPeggedChangeAmountDecrease != nil {
		return *x.IsPeggedChangeAmountDecrease
	}
	return false
}

func (x *Order) GetReferenceChangeAmount() float64 {
	if x != nil && x.ReferenceChangeAmount != nil {
		return *x.ReferenceChangeAmount
	}
	return 0
}

func (x *Order) GetReferenceExchangeId() string {
	if x != nil && x.ReferenceExchangeId != nil {
		return *x.ReferenceExchangeId
	}
	return ""
}

func (x *Order) GetAdjustedOrderType() string {
	if x != nil && x.AdjustedOrderType != nil {
		return *x.AdjustedOrderType
	}
	return ""
}

func (x *Order) GetTriggerPrice() float64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *Order) GetAdjustedStopPrice() float64 {
	if x != nil && x.AdjustedStopPrice != nil {
		return *x.AdjustedStopPrice
	}
	return 0
}

func (x *Order) GetAdjustedStopLimitPrice() float64 {
	if x != nil && x.AdjustedStopLimitPrice != nil {
		return *x.AdjustedStopLimitPrice
	}
	return 0
}

func (x *Order) GetAdjustedTrailingAmount() float64 {
	if x != nil && x.AdjustedTrailingAmount != nil {
		return *x.AdjustedTrailingAmount
	}
	return 0
}

func (x *Order) GetAdjustableTrailingUnit() int32 {
	if x != nil && x.AdjustableTrailingUnit != nil {
		return *x.AdjustableTrailingUnit
	}
	return 0
}

func (x *Order) GetLmtPriceOffset() float64 {
	if x != nil && x.LmtPriceOffset != nil {
		return *x.LmtPriceOffset
	}
	return 0
}

func (x *Order) GetConditions() []*OrderCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Order) GetConditionsCancelOrder() bool {
	if x != nil && x.ConditionsCancelOrder != nil {
		return *x.ConditionsCancelOrder
	}
	return false
}

func (x *Order) GetConditionsIgnoreRth() bool {
	if x != nil && x.ConditionsIgnoreRth != nil {
		return *x.ConditionsIgnoreRth
	}
	return false
}

func (x *Order) GetModelCode() string {
	if x != nil && x.ModelCode != nil {
		return *x.ModelCode
	}
	return ""
}

func (x *Order) GetExtOperator() string {
	if x != nil && x.ExtOperator != nil {
		return *x.ExtOperator
	}
	return ""
}

func (x *Order) GetSoftDollarTier() *SoftDollarTier {
	if x != nil {
		return x.SoftDollarTier
	}
	return nil
}

func (x *Order) GetCashQty() float64 {
	if x != nil && x.CashQty != nil {
		return *x.CashQty
	}
	return 0
}

func (x *Order) GetMifid2DecisionMaker() string {
	if x != nil && x.Mifid2DecisionMaker != nil {
		return *x.Mifid2DecisionMaker
	}
	return ""
}

func (x *Order) GetMifid2DecisionAlgo() string {
	if x != nil && x.Mifid2DecisionAlgo != nil {
		return *x.Mifid2DecisionAlgo
	}
	return ""
}

func (x *Order) GetMifid2ExecutionTrader() string {
	if x != nil && x.Mifid2ExecutionTrader != nil {
		return *x.Mifid2ExecutionTrader
	}
	return ""
}

func (x *Order) GetMifid2ExecutionAlgo() string {
	if x != nil && x.Mifid2ExecutionAlgo != nil {
		return *x.Mifid2ExecutionAlgo
	}
	return ""
}

func (x *Order) GetDontUseAutoPriceForHedge() bool {
	if x != nil && x.DontUseAutoPriceForHedge != nil {
		return *x.DontUseAutoPriceForHedge
	}
	return false
}

func (x *Order) GetIsOmsContainer() bool {
	if x != nil && x.IsOmsContainer != nil {
		return *x.IsOmsContainer
	}
	return false
}

func (x *Order) GetDiscretionaryUpToLimitPrice() bool {
	if x != nil && x.DiscretionaryUpToLimitPrice != nil {
		return *x.DiscretionaryUpToLimitPrice
	}
	return false
}

func (x *Order) GetAutoCancelDate() string {
	if x != nil && x.AutoCancelDate != nil {
		return *x.AutoCancelDate
	}
	return ""
}

func (x *Order) GetFilledQuantity() string {
	if x != nil && x.FilledQuantity != nil {
		return *x.FilledQuantity
	}
	return ""
}

func (x *Order) GetRefFuturesConId() int32 {
	if x != nil && x.RefFuturesConId != nil {
		return *x.RefFuturesConId
	}
	return 0
}

func (x *Order) GetAutoCancelParent() bool {
	if x != nil && x.AutoCancelParent != nil {
		return *x.AutoCancelParent
	}
	return false
}

func (x *Order) GetShareholder() string {
	if x != nil && x.Shareholder != nil {
		return *x.Shareholder
	}
	return ""
}

func (x *Order) GetImbalanceOnly() bool {
	if x != nil && x.ImbalanceOnly != nil {
		return *x.ImbalanceOnly
	}
	return false
}

func (x *Order) GetRouteMarketableToBbo() bool {
	if x != nil && x.RouteMarketableToBbo != nil {
		return *x.RouteMarketableToBbo
	}
	return false
}

func (x *Order) GetParentPermId() int64 {
	if x != nil && x.ParentPermId != nil {
		return *x.ParentPermId
	}
	return 0
}

func (x *Order) GetUsePriceMgmtAlgo() int32 {
	if x != nil && x.UsePriceMgmtAlgo != nil {
		return *x.UsePriceMgmtAlgo
	}
	return 0
}

func (x *Order) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Order) GetPostToAts() int32 {
	if x != nil && x.PostToAts != nil {
		return *x.PostToAts
	}
	return 0
}

func (x *Order) GetAdvancedErrorOverride() string {
	if x != nil && x.AdvancedErrorOverride != nil {
		return *x.AdvancedErrorOverride
	}
	return ""
}

func (x *Order) GetManualOrderTime() string {
	if x != nil && x.ManualOrderTime != nil {
		return *x.ManualOrderTime
	}
	return ""
}

func (x *Order) GetMinTradeQty() int32 {
	if x != nil && x.MinTradeQty != nil {
		return *x.MinTradeQty
	}
	return 0
}

func (x *Order) GetMinCompeteSize() int32 {
	if x != nil && x.MinCompeteSize != nil {
		return *x.MinCompeteSize
	}
	return 0
}

func (x *Order) GetCompeteAgainstBestOffset() float64 {
	if x != nil && x.CompeteAgainstBestOffset != nil {
		return *x.CompeteAgainstBestOffset
	}
	return 0
}

func (x *Order) GetMidOffsetAtWhole() float64 {
	if x != nil && x.MidOffsetAtWhole != nil {
		return *x.MidOffsetAtWhole
	}
	return 0
}

func (x *Order) GetMidOffsetAtHalf() float64 {
	if x != nil && x.MidOffsetAtHalf != nil {
		return *x.MidOffsetAtHalf
	}
	return 0
}

func (x *Order) GetCustomerAccount() string {
	if x != nil && x.CustomerAccount != nil {
		return *x.CustomerAccount
	}
	return ""
}

func (x *Order) GetProfessionalCustomer() bool {
	if x != nil && x.ProfessionalCustomer != nil {
		return *x.ProfessionalCustomer
	}
	return false
}

func (x *Order) GetBondAccruedInterest() string {
	if x != nil && x.BondAccruedInterest != nil {
		return *x.BondAccruedInterest
	}
	return ""
}

func (x *Order) GetIncludeOvernight() bool {
	if x != nil && x.IncludeOvernight != nil {
		return *x.IncludeOvernight
	}
	return false
}

func (x *Order) GetManualOrderIndicator() int32 {
	if x != nil && x.ManualOrderIndicator != nil {
		return *x.ManualOrderIndicator
	}
	return 0
}

func (x *Order) GetSubmitter() string {
	if x != nil && x.Submitter != nil {
		return *x.Submitter
	}
	return ""
}

var File_Order_proto protoreflect.FileDescriptor

var file_Order_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x53,
	0x6f, 0x66, 0x74, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x48, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6c, 0x6d, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x08, 0x52, 0x08, 0x6c, 0x6d, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x61, 0x75, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x09, 0x52, 0x08, 0x61, 0x75, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x74, 0x69, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x03,
	0x74, 0x69, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x10, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x11, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x74, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x77, 0x65, 0x65, 0x70, 0x54, 0x6f, 0x46,
	0x69, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0b, 0x73, 0x77, 0x65,
	0x65, 0x70, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x14, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x15, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x17, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x6f,
	0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x63, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x6f, 0x63, 0x61, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x38, 0x30, 0x41,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x38, 0x30,
	0x41, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x63, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x07, 0x6f, 0x63, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x0d, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x61,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x07, 0x66,
	0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x08, 0x66,
	0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x66, 0x61,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x23, 0x52, 0x0c, 0x66, 0x61, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x25, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x26, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x27, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x15, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x41, 0x75, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x29, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x41, 0x75, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2a, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2c, 0x52, 0x15,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2d, 0x52, 0x19, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x1e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x12, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x31, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x48, 0x32, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x33, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x34, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x35, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x36, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x37, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x46,
	0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x08, 0x48, 0x38, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x39, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3a, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x68, 0x65, 0x64, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x0a, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61,
	0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x3c, 0x52, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6c, 0x67, 0x6f, 0x49, 0x64, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x06, 0x61, 0x6c, 0x67, 0x6f, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x66, 0x0a, 0x17, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x40, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x17, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x68,
	0x61, 0x74, 0x49, 0x66, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3e, 0x52, 0x06, 0x77, 0x68,
	0x61, 0x74, 0x49, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3f, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x40, 0x52, 0x1d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x41, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x42, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x43, 0x52, 0x0d, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x12, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x48, 0x45, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x72, 0x6d, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x18, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47,
	0x52, 0x1b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x49, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x41, 0x6d, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x4a, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x4b, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4c, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x50, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x4d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x01, 0x48, 0x4e, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x4f, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x6f,
	0x74, 0x48, 0x65, 0x6c, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x48, 0x50, 0x52, 0x07, 0x6e,
	0x6f, 0x74, 0x48, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x69, 0x73, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x54, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x09,
	0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x51, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x48, 0x52, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x53, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x54, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x01, 0x48, 0x55, 0x52, 0x12, 0x70, 0x65,
	0x67, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x69, 0x73, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x56, 0x52, 0x1c, 0x69, 0x73, 0x50,
	0x65, 0x67, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x57, 0x52, 0x15, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x58, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x59, 0x52, 0x11, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5a, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5b, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x16, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5c, 0x52,
	0x16, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5d, 0x52, 0x16, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x48, 0x5e, 0x52, 0x16, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6c, 0x6d, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x01, 0x48, 0x5f, 0x52, 0x0e,
	0x6c, 0x6d, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x48, 0x60, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x74, 0x68, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x61, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x62, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x63, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x44,
	0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x44,
	0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x65, 0x72, 0x48, 0x64, 0x52, 0x0e, 0x73, 0x6f, 0x66,
	0x74, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x51, 0x74, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x65, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x66, 0x52, 0x13, 0x6d, 0x69,
	0x66, 0x69, 0x64, 0x32, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x67, 0x52, 0x12, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x32, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x68, 0x52, 0x15, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x32, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x69, 0x52, 0x13, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x64,
	0x6f, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x6a, 0x52,
	0x18, 0x64, 0x6f, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x69, 0x73, 0x4f, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x6b, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x70, 0x54, 0x6f, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x48, 0x6c,
	0x52, 0x1b, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x55,
	0x70, 0x54, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6d, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6e, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x6f, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x75, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x70, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x71, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x08, 0x48, 0x72, 0x52, 0x0d, 0x69, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x42, 0x62, 0x6f, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x48, 0x73, 0x52, 0x14, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x42,
	0x62, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x48, 0x74, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x75, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x76, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x74, 0x73, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x77, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x78, 0x52, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x74, 0x79, 0x18, 0x7f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x7a, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x7b, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x41, 0x67, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x7c, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x7d, 0x52, 0x10, 0x6d, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x74, 0x57, 0x68,
	0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x6d, 0x69, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x41, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x7e, 0x52, 0x0f, 0x6d, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x74, 0x48,
	0x61, 0x6c, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x7f, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x80, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x81, 0x01, 0x52, 0x13, 0x62, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x82, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x83, 0x01, 0x52,
	0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x84, 0x01, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x6c, 0x67, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x69, 0x73, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x49,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6d,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x69, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x52, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x63, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x38, 0x30, 0x41, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x63, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x41, 0x75, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x49, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x68, 0x61, 0x74, 0x49, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x72, 0x6d, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f,
	0x70, 0x74, 0x4f, 0x75, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x74, 0x48,
	0x65, 0x6c, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x65,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x69, 0x73, 0x50, 0x65, 0x67, 0x67,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6d, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x51, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x32, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x32, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x32, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x6f,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x4f, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x70, 0x54, 0x6f, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x42, 0x62, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x67, 0x6d, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x41, 0x74, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51,
	0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x41, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x69, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x6f, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_Order_proto_rawDescOnce sync.Once
	file_Order_proto_rawDescData []byte
)

func file_Order_proto_rawDescGZIP() []byte {
	file_Order_proto_rawDescOnce.Do(func() {
		file_Order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Order_proto_rawDesc), len(file_Order_proto_rawDesc)))
	})
	return file_Order_proto_rawDescData
}

var file_Order_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_Order_proto_goTypes = []any{
	(*Order)(nil),          // 0: protobuf.Order
	nil,                    // 1: protobuf.Order.AlgoParamsEntry
	nil,                    // 2: protobuf.Order.SmartComboRoutingParamsEntry
	nil,                    // 3: protobuf.Order.OrderMiscOptionsEntry
	(*OrderCondition)(nil), // 4: protobuf.OrderCondition
	(*SoftDollarTier)(nil), // 5: protobuf.SoftDollarTier
}
var file_Order_proto_depIdxs = []int32{
	1, // 0: protobuf.Order.algoParams:type_name -> protobuf.Order.AlgoParamsEntry
	2, // 1: protobuf.Order.smartComboRoutingParams:type_name -> protobuf.Order.SmartComboRoutingParamsEntry
	3, // 2: protobuf.Order.orderMiscOptions:type_name -> protobuf.Order.OrderMiscOptionsEntry
	4, // 3: protobuf.Order.conditions:type_name -> protobuf.OrderCondition
	5, // 4: protobuf.Order.softDollarTier:type_name -> protobuf.SoftDollarTier
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_Order_proto_init() }
func file_Order_proto_init() {
	if File_Order_proto != nil {
		return
	}
	file_OrderCondition_proto_init()
	file_SoftDollarTier_proto_init()
	file_Order_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Order_proto_rawDesc), len(file_Order_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Order_proto_goTypes,
		DependencyIndexes: file_Order_proto_depIdxs,
		MessageInfos:      file_Order_proto_msgTypes,
	}.Build()
	File_Order_proto = out.File
	file_Order_proto_goTypes = nil
	file_Order_proto_depIdxs = nil
}

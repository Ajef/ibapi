// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: OrderState.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderState struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Status                         *string                `protobuf:"bytes,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
	InitMarginBefore               *float64               `protobuf:"fixed64,2,opt,name=initMarginBefore,proto3,oneof" json:"initMarginBefore,omitempty"`
	MaintMarginBefore              *float64               `protobuf:"fixed64,3,opt,name=maintMarginBefore,proto3,oneof" json:"maintMarginBefore,omitempty"`
	EquityWithLoanBefore           *float64               `protobuf:"fixed64,4,opt,name=equityWithLoanBefore,proto3,oneof" json:"equityWithLoanBefore,omitempty"`
	InitMarginChange               *float64               `protobuf:"fixed64,5,opt,name=initMarginChange,proto3,oneof" json:"initMarginChange,omitempty"`
	MaintMarginChange              *float64               `protobuf:"fixed64,6,opt,name=maintMarginChange,proto3,oneof" json:"maintMarginChange,omitempty"`
	EquityWithLoanChange           *float64               `protobuf:"fixed64,7,opt,name=equityWithLoanChange,proto3,oneof" json:"equityWithLoanChange,omitempty"`
	InitMarginAfter                *float64               `protobuf:"fixed64,8,opt,name=initMarginAfter,proto3,oneof" json:"initMarginAfter,omitempty"`
	MaintMarginAfter               *float64               `protobuf:"fixed64,9,opt,name=maintMarginAfter,proto3,oneof" json:"maintMarginAfter,omitempty"`
	EquityWithLoanAfter            *float64               `protobuf:"fixed64,10,opt,name=equityWithLoanAfter,proto3,oneof" json:"equityWithLoanAfter,omitempty"`
	CommissionAndFees              *float64               `protobuf:"fixed64,11,opt,name=commissionAndFees,proto3,oneof" json:"commissionAndFees,omitempty"`
	MinCommissionAndFees           *float64               `protobuf:"fixed64,12,opt,name=minCommissionAndFees,proto3,oneof" json:"minCommissionAndFees,omitempty"`
	MaxCommissionAndFees           *float64               `protobuf:"fixed64,13,opt,name=maxCommissionAndFees,proto3,oneof" json:"maxCommissionAndFees,omitempty"`
	CommissionAndFeesCurrency      *string                `protobuf:"bytes,14,opt,name=commissionAndFeesCurrency,proto3,oneof" json:"commissionAndFeesCurrency,omitempty"`
	MarginCurrency                 *string                `protobuf:"bytes,15,opt,name=marginCurrency,proto3,oneof" json:"marginCurrency,omitempty"`
	InitMarginBeforeOutsideRTH     *float64               `protobuf:"fixed64,16,opt,name=initMarginBeforeOutsideRTH,proto3,oneof" json:"initMarginBeforeOutsideRTH,omitempty"`
	MaintMarginBeforeOutsideRTH    *float64               `protobuf:"fixed64,17,opt,name=maintMarginBeforeOutsideRTH,proto3,oneof" json:"maintMarginBeforeOutsideRTH,omitempty"`
	EquityWithLoanBeforeOutsideRTH *float64               `protobuf:"fixed64,18,opt,name=equityWithLoanBeforeOutsideRTH,proto3,oneof" json:"equityWithLoanBeforeOutsideRTH,omitempty"`
	InitMarginChangeOutsideRTH     *float64               `protobuf:"fixed64,19,opt,name=initMarginChangeOutsideRTH,proto3,oneof" json:"initMarginChangeOutsideRTH,omitempty"`
	MaintMarginChangeOutsideRTH    *float64               `protobuf:"fixed64,20,opt,name=maintMarginChangeOutsideRTH,proto3,oneof" json:"maintMarginChangeOutsideRTH,omitempty"`
	EquityWithLoanChangeOutsideRTH *float64               `protobuf:"fixed64,21,opt,name=equityWithLoanChangeOutsideRTH,proto3,oneof" json:"equityWithLoanChangeOutsideRTH,omitempty"`
	InitMarginAfterOutsideRTH      *float64               `protobuf:"fixed64,22,opt,name=initMarginAfterOutsideRTH,proto3,oneof" json:"initMarginAfterOutsideRTH,omitempty"`
	MaintMarginAfterOutsideRTH     *float64               `protobuf:"fixed64,23,opt,name=maintMarginAfterOutsideRTH,proto3,oneof" json:"maintMarginAfterOutsideRTH,omitempty"`
	EquityWithLoanAfterOutsideRTH  *float64               `protobuf:"fixed64,24,opt,name=equityWithLoanAfterOutsideRTH,proto3,oneof" json:"equityWithLoanAfterOutsideRTH,omitempty"`
	SuggestedSize                  *string                `protobuf:"bytes,25,opt,name=suggestedSize,proto3,oneof" json:"suggestedSize,omitempty"`
	RejectReason                   *string                `protobuf:"bytes,26,opt,name=rejectReason,proto3,oneof" json:"rejectReason,omitempty"`
	OrderAllocations               []*OrderAllocation     `protobuf:"bytes,27,rep,name=orderAllocations,proto3" json:"orderAllocations,omitempty"`
	WarningText                    *string                `protobuf:"bytes,28,opt,name=warningText,proto3,oneof" json:"warningText,omitempty"`
	CompletedTime                  *string                `protobuf:"bytes,29,opt,name=completedTime,proto3,oneof" json:"completedTime,omitempty"`
	CompletedStatus                *string                `protobuf:"bytes,30,opt,name=completedStatus,proto3,oneof" json:"completedStatus,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *OrderState) Reset() {
	*x = OrderState{}
	mi := &file_OrderState_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderState) ProtoMessage() {}

func (x *OrderState) ProtoReflect() protoreflect.Message {
	mi := &file_OrderState_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderState.ProtoReflect.Descriptor instead.
func (*OrderState) Descriptor() ([]byte, []int) {
	return file_OrderState_proto_rawDescGZIP(), []int{0}
}

func (x *OrderState) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *OrderState) GetInitMarginBefore() float64 {
	if x != nil && x.InitMarginBefore != nil {
		return *x.InitMarginBefore
	}
	return 0
}

func (x *OrderState) GetMaintMarginBefore() float64 {
	if x != nil && x.MaintMarginBefore != nil {
		return *x.MaintMarginBefore
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanBefore() float64 {
	if x != nil && x.EquityWithLoanBefore != nil {
		return *x.EquityWithLoanBefore
	}
	return 0
}

func (x *OrderState) GetInitMarginChange() float64 {
	if x != nil && x.InitMarginChange != nil {
		return *x.InitMarginChange
	}
	return 0
}

func (x *OrderState) GetMaintMarginChange() float64 {
	if x != nil && x.MaintMarginChange != nil {
		return *x.MaintMarginChange
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanChange() float64 {
	if x != nil && x.EquityWithLoanChange != nil {
		return *x.EquityWithLoanChange
	}
	return 0
}

func (x *OrderState) GetInitMarginAfter() float64 {
	if x != nil && x.InitMarginAfter != nil {
		return *x.InitMarginAfter
	}
	return 0
}

func (x *OrderState) GetMaintMarginAfter() float64 {
	if x != nil && x.MaintMarginAfter != nil {
		return *x.MaintMarginAfter
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanAfter() float64 {
	if x != nil && x.EquityWithLoanAfter != nil {
		return *x.EquityWithLoanAfter
	}
	return 0
}

func (x *OrderState) GetCommissionAndFees() float64 {
	if x != nil && x.CommissionAndFees != nil {
		return *x.CommissionAndFees
	}
	return 0
}

func (x *OrderState) GetMinCommissionAndFees() float64 {
	if x != nil && x.MinCommissionAndFees != nil {
		return *x.MinCommissionAndFees
	}
	return 0
}

func (x *OrderState) GetMaxCommissionAndFees() float64 {
	if x != nil && x.MaxCommissionAndFees != nil {
		return *x.MaxCommissionAndFees
	}
	return 0
}

func (x *OrderState) GetCommissionAndFeesCurrency() string {
	if x != nil && x.CommissionAndFeesCurrency != nil {
		return *x.CommissionAndFeesCurrency
	}
	return ""
}

func (x *OrderState) GetMarginCurrency() string {
	if x != nil && x.MarginCurrency != nil {
		return *x.MarginCurrency
	}
	return ""
}

func (x *OrderState) GetInitMarginBeforeOutsideRTH() float64 {
	if x != nil && x.InitMarginBeforeOutsideRTH != nil {
		return *x.InitMarginBeforeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetMaintMarginBeforeOutsideRTH() float64 {
	if x != nil && x.MaintMarginBeforeOutsideRTH != nil {
		return *x.MaintMarginBeforeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanBeforeOutsideRTH() float64 {
	if x != nil && x.EquityWithLoanBeforeOutsideRTH != nil {
		return *x.EquityWithLoanBeforeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetInitMarginChangeOutsideRTH() float64 {
	if x != nil && x.InitMarginChangeOutsideRTH != nil {
		return *x.InitMarginChangeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetMaintMarginChangeOutsideRTH() float64 {
	if x != nil && x.MaintMarginChangeOutsideRTH != nil {
		return *x.MaintMarginChangeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanChangeOutsideRTH() float64 {
	if x != nil && x.EquityWithLoanChangeOutsideRTH != nil {
		return *x.EquityWithLoanChangeOutsideRTH
	}
	return 0
}

func (x *OrderState) GetInitMarginAfterOutsideRTH() float64 {
	if x != nil && x.InitMarginAfterOutsideRTH != nil {
		return *x.InitMarginAfterOutsideRTH
	}
	return 0
}

func (x *OrderState) GetMaintMarginAfterOutsideRTH() float64 {
	if x != nil && x.MaintMarginAfterOutsideRTH != nil {
		return *x.MaintMarginAfterOutsideRTH
	}
	return 0
}

func (x *OrderState) GetEquityWithLoanAfterOutsideRTH() float64 {
	if x != nil && x.EquityWithLoanAfterOutsideRTH != nil {
		return *x.EquityWithLoanAfterOutsideRTH
	}
	return 0
}

func (x *OrderState) GetSuggestedSize() string {
	if x != nil && x.SuggestedSize != nil {
		return *x.SuggestedSize
	}
	return ""
}

func (x *OrderState) GetRejectReason() string {
	if x != nil && x.RejectReason != nil {
		return *x.RejectReason
	}
	return ""
}

func (x *OrderState) GetOrderAllocations() []*OrderAllocation {
	if x != nil {
		return x.OrderAllocations
	}
	return nil
}

func (x *OrderState) GetWarningText() string {
	if x != nil && x.WarningText != nil {
		return *x.WarningText
	}
	return ""
}

func (x *OrderState) GetCompletedTime() string {
	if x != nil && x.CompletedTime != nil {
		return *x.CompletedTime
	}
	return ""
}

func (x *OrderState) GetCompletedStatus() string {
	if x != nil && x.CompletedStatus != nil {
		return *x.CompletedStatus
	}
	return ""
}

var File_OrderState_proto protoreflect.FileDescriptor

var file_OrderState_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x15, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x12, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x11, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x03, 0x52, 0x14, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x6f, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f,
	0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06,
	0x52, 0x14, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x07, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0b, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x52, 0x54, 0x48, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x1a, 0x69, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x1b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x6f, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x52, 0x54, 0x48, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x1e, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x12, 0x52, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52,
	0x54, 0x48, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x1b, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x65, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x14, 0x52, 0x1e, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x54, 0x48, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x19, 0x69, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16,
	0x52, 0x1a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x1d, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61,
	0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x1d, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x18, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x6f, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52,
	0x54, 0x48, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52,
	0x54, 0x48, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x54, 0x48, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x54, 0x48, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x54, 0x48, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x54, 0x48, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x54, 0x48, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x52, 0x54, 0x48, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_OrderState_proto_rawDescOnce sync.Once
	file_OrderState_proto_rawDescData []byte
)

func file_OrderState_proto_rawDescGZIP() []byte {
	file_OrderState_proto_rawDescOnce.Do(func() {
		file_OrderState_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_OrderState_proto_rawDesc), len(file_OrderState_proto_rawDesc)))
	})
	return file_OrderState_proto_rawDescData
}

var file_OrderState_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_OrderState_proto_goTypes = []any{
	(*OrderState)(nil),      // 0: protobuf.OrderState
	(*OrderAllocation)(nil), // 1: protobuf.OrderAllocation
}
var file_OrderState_proto_depIdxs = []int32{
	1, // 0: protobuf.OrderState.orderAllocations:type_name -> protobuf.OrderAllocation
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_OrderState_proto_init() }
func file_OrderState_proto_init() {
	if File_OrderState_proto != nil {
		return
	}
	file_OrderAllocation_proto_init()
	file_OrderState_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_OrderState_proto_rawDesc), len(file_OrderState_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_OrderState_proto_goTypes,
		DependencyIndexes: file_OrderState_proto_depIdxs,
		MessageInfos:      file_OrderState_proto_msgTypes,
	}.Build()
	File_OrderState_proto = out.File
	file_OrderState_proto_goTypes = nil
	file_OrderState_proto_depIdxs = nil
}

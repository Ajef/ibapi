// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: ContractDetails.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractDetails struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MarketName             *string                `protobuf:"bytes,1,opt,name=marketName,proto3,oneof" json:"marketName,omitempty"`
	MinTick                *string                `protobuf:"bytes,2,opt,name=minTick,proto3,oneof" json:"minTick,omitempty"`
	OrderTypes             *string                `protobuf:"bytes,3,opt,name=orderTypes,proto3,oneof" json:"orderTypes,omitempty"`
	ValidExchanges         *string                `protobuf:"bytes,4,opt,name=validExchanges,proto3,oneof" json:"validExchanges,omitempty"`
	PriceMagnifier         *int32                 `protobuf:"varint,5,opt,name=priceMagnifier,proto3,oneof" json:"priceMagnifier,omitempty"`
	UnderConId             *int32                 `protobuf:"varint,6,opt,name=underConId,proto3,oneof" json:"underConId,omitempty"`
	LongName               *string                `protobuf:"bytes,7,opt,name=longName,proto3,oneof" json:"longName,omitempty"`
	ContractMonth          *string                `protobuf:"bytes,8,opt,name=contractMonth,proto3,oneof" json:"contractMonth,omitempty"`
	Industry               *string                `protobuf:"bytes,9,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Category               *string                `protobuf:"bytes,10,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Subcategory            *string                `protobuf:"bytes,11,opt,name=subcategory,proto3,oneof" json:"subcategory,omitempty"`
	TimeZoneId             *string                `protobuf:"bytes,12,opt,name=timeZoneId,proto3,oneof" json:"timeZoneId,omitempty"`
	TradingHours           *string                `protobuf:"bytes,13,opt,name=tradingHours,proto3,oneof" json:"tradingHours,omitempty"`
	LiquidHours            *string                `protobuf:"bytes,14,opt,name=liquidHours,proto3,oneof" json:"liquidHours,omitempty"`
	EvRule                 *string                `protobuf:"bytes,15,opt,name=evRule,proto3,oneof" json:"evRule,omitempty"`
	EvMultiplier           *float64               `protobuf:"fixed64,16,opt,name=evMultiplier,proto3,oneof" json:"evMultiplier,omitempty"`
	SecIdList              map[string]string      `protobuf:"bytes,17,rep,name=secIdList,proto3" json:"secIdList,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AggGroup               *int32                 `protobuf:"varint,18,opt,name=aggGroup,proto3,oneof" json:"aggGroup,omitempty"`
	UnderSymbol            *string                `protobuf:"bytes,19,opt,name=underSymbol,proto3,oneof" json:"underSymbol,omitempty"`
	UnderSecType           *string                `protobuf:"bytes,20,opt,name=underSecType,proto3,oneof" json:"underSecType,omitempty"`
	MarketRuleIds          *string                `protobuf:"bytes,21,opt,name=marketRuleIds,proto3,oneof" json:"marketRuleIds,omitempty"`
	RealExpirationDate     *string                `protobuf:"bytes,22,opt,name=realExpirationDate,proto3,oneof" json:"realExpirationDate,omitempty"`
	StockType              *string                `protobuf:"bytes,23,opt,name=stockType,proto3,oneof" json:"stockType,omitempty"`
	MinSize                *string                `protobuf:"bytes,24,opt,name=minSize,proto3,oneof" json:"minSize,omitempty"`
	SizeIncrement          *string                `protobuf:"bytes,25,opt,name=sizeIncrement,proto3,oneof" json:"sizeIncrement,omitempty"`
	SuggestedSizeIncrement *string                `protobuf:"bytes,26,opt,name=suggestedSizeIncrement,proto3,oneof" json:"suggestedSizeIncrement,omitempty"`
	// fund	fields
	FundName                        *string `protobuf:"bytes,27,opt,name=fundName,proto3,oneof" json:"fundName,omitempty"`
	FundFamily                      *string `protobuf:"bytes,28,opt,name=fundFamily,proto3,oneof" json:"fundFamily,omitempty"`
	FundType                        *string `protobuf:"bytes,29,opt,name=fundType,proto3,oneof" json:"fundType,omitempty"`
	FundFrontLoad                   *string `protobuf:"bytes,30,opt,name=fundFrontLoad,proto3,oneof" json:"fundFrontLoad,omitempty"`
	FundBackLoad                    *string `protobuf:"bytes,31,opt,name=fundBackLoad,proto3,oneof" json:"fundBackLoad,omitempty"`
	FundBackLoadTimeInterval        *string `protobuf:"bytes,32,opt,name=fundBackLoadTimeInterval,proto3,oneof" json:"fundBackLoadTimeInterval,omitempty"`
	FundManagementFee               *string `protobuf:"bytes,33,opt,name=fundManagementFee,proto3,oneof" json:"fundManagementFee,omitempty"`
	FundClosed                      *bool   `protobuf:"varint,34,opt,name=fundClosed,proto3,oneof" json:"fundClosed,omitempty"`
	FundClosedForNewInvestors       *bool   `protobuf:"varint,35,opt,name=fundClosedForNewInvestors,proto3,oneof" json:"fundClosedForNewInvestors,omitempty"`
	FundClosedForNewMoney           *bool   `protobuf:"varint,36,opt,name=fundClosedForNewMoney,proto3,oneof" json:"fundClosedForNewMoney,omitempty"`
	FundNotifyAmount                *string `protobuf:"bytes,37,opt,name=fundNotifyAmount,proto3,oneof" json:"fundNotifyAmount,omitempty"`
	FundMinimumInitialPurchase      *string `protobuf:"bytes,38,opt,name=fundMinimumInitialPurchase,proto3,oneof" json:"fundMinimumInitialPurchase,omitempty"`
	FundMinimumSubsequentPurchase   *string `protobuf:"bytes,39,opt,name=fundMinimumSubsequentPurchase,proto3,oneof" json:"fundMinimumSubsequentPurchase,omitempty"`
	FundBlueSkyStates               *string `protobuf:"bytes,40,opt,name=fundBlueSkyStates,proto3,oneof" json:"fundBlueSkyStates,omitempty"`
	FundBlueSkyTerritories          *string `protobuf:"bytes,41,opt,name=fundBlueSkyTerritories,proto3,oneof" json:"fundBlueSkyTerritories,omitempty"`
	FundDistributionPolicyIndicator *string `protobuf:"bytes,42,opt,name=fundDistributionPolicyIndicator,proto3,oneof" json:"fundDistributionPolicyIndicator,omitempty"`
	FundAssetType                   *string `protobuf:"bytes,43,opt,name=fundAssetType,proto3,oneof" json:"fundAssetType,omitempty"`
	// bond fields
	Cusip                   *string                `protobuf:"bytes,44,opt,name=cusip,proto3,oneof" json:"cusip,omitempty"`
	IssueDate               *string                `protobuf:"bytes,45,opt,name=issueDate,proto3,oneof" json:"issueDate,omitempty"`
	Ratings                 *string                `protobuf:"bytes,46,opt,name=ratings,proto3,oneof" json:"ratings,omitempty"`
	BondType                *string                `protobuf:"bytes,47,opt,name=bondType,proto3,oneof" json:"bondType,omitempty"`
	Coupon                  *float64               `protobuf:"fixed64,48,opt,name=coupon,proto3,oneof" json:"coupon,omitempty"`
	CouponType              *string                `protobuf:"bytes,49,opt,name=couponType,proto3,oneof" json:"couponType,omitempty"`
	Convertible             *bool                  `protobuf:"varint,50,opt,name=convertible,proto3,oneof" json:"convertible,omitempty"`
	Callable                *bool                  `protobuf:"varint,51,opt,name=callable,proto3,oneof" json:"callable,omitempty"`
	Puttable                *bool                  `protobuf:"varint,52,opt,name=puttable,proto3,oneof" json:"puttable,omitempty"`
	DescAppend              *string                `protobuf:"bytes,53,opt,name=descAppend,proto3,oneof" json:"descAppend,omitempty"`
	NextOptionDate          *string                `protobuf:"bytes,54,opt,name=nextOptionDate,proto3,oneof" json:"nextOptionDate,omitempty"`
	NextOptionType          *string                `protobuf:"bytes,55,opt,name=nextOptionType,proto3,oneof" json:"nextOptionType,omitempty"`
	NextOptionPartial       *bool                  `protobuf:"varint,56,opt,name=nextOptionPartial,proto3,oneof" json:"nextOptionPartial,omitempty"`
	BondNotes               *string                `protobuf:"bytes,57,opt,name=bondNotes,proto3,oneof" json:"bondNotes,omitempty"`
	IneligibilityReasonList []*IneligibilityReason `protobuf:"bytes,58,rep,name=ineligibilityReasonList,proto3" json:"ineligibilityReasonList,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ContractDetails) Reset() {
	*x = ContractDetails{}
	mi := &file_ContractDetails_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetails) ProtoMessage() {}

func (x *ContractDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ContractDetails_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetails.ProtoReflect.Descriptor instead.
func (*ContractDetails) Descriptor() ([]byte, []int) {
	return file_ContractDetails_proto_rawDescGZIP(), []int{0}
}

func (x *ContractDetails) GetMarketName() string {
	if x != nil && x.MarketName != nil {
		return *x.MarketName
	}
	return ""
}

func (x *ContractDetails) GetMinTick() string {
	if x != nil && x.MinTick != nil {
		return *x.MinTick
	}
	return ""
}

func (x *ContractDetails) GetOrderTypes() string {
	if x != nil && x.OrderTypes != nil {
		return *x.OrderTypes
	}
	return ""
}

func (x *ContractDetails) GetValidExchanges() string {
	if x != nil && x.ValidExchanges != nil {
		return *x.ValidExchanges
	}
	return ""
}

func (x *ContractDetails) GetPriceMagnifier() int32 {
	if x != nil && x.PriceMagnifier != nil {
		return *x.PriceMagnifier
	}
	return 0
}

func (x *ContractDetails) GetUnderConId() int32 {
	if x != nil && x.UnderConId != nil {
		return *x.UnderConId
	}
	return 0
}

func (x *ContractDetails) GetLongName() string {
	if x != nil && x.LongName != nil {
		return *x.LongName
	}
	return ""
}

func (x *ContractDetails) GetContractMonth() string {
	if x != nil && x.ContractMonth != nil {
		return *x.ContractMonth
	}
	return ""
}

func (x *ContractDetails) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *ContractDetails) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *ContractDetails) GetSubcategory() string {
	if x != nil && x.Subcategory != nil {
		return *x.Subcategory
	}
	return ""
}

func (x *ContractDetails) GetTimeZoneId() string {
	if x != nil && x.TimeZoneId != nil {
		return *x.TimeZoneId
	}
	return ""
}

func (x *ContractDetails) GetTradingHours() string {
	if x != nil && x.TradingHours != nil {
		return *x.TradingHours
	}
	return ""
}

func (x *ContractDetails) GetLiquidHours() string {
	if x != nil && x.LiquidHours != nil {
		return *x.LiquidHours
	}
	return ""
}

func (x *ContractDetails) GetEvRule() string {
	if x != nil && x.EvRule != nil {
		return *x.EvRule
	}
	return ""
}

func (x *ContractDetails) GetEvMultiplier() float64 {
	if x != nil && x.EvMultiplier != nil {
		return *x.EvMultiplier
	}
	return 0
}

func (x *ContractDetails) GetSecIdList() map[string]string {
	if x != nil {
		return x.SecIdList
	}
	return nil
}

func (x *ContractDetails) GetAggGroup() int32 {
	if x != nil && x.AggGroup != nil {
		return *x.AggGroup
	}
	return 0
}

func (x *ContractDetails) GetUnderSymbol() string {
	if x != nil && x.UnderSymbol != nil {
		return *x.UnderSymbol
	}
	return ""
}

func (x *ContractDetails) GetUnderSecType() string {
	if x != nil && x.UnderSecType != nil {
		return *x.UnderSecType
	}
	return ""
}

func (x *ContractDetails) GetMarketRuleIds() string {
	if x != nil && x.MarketRuleIds != nil {
		return *x.MarketRuleIds
	}
	return ""
}

func (x *ContractDetails) GetRealExpirationDate() string {
	if x != nil && x.RealExpirationDate != nil {
		return *x.RealExpirationDate
	}
	return ""
}

func (x *ContractDetails) GetStockType() string {
	if x != nil && x.StockType != nil {
		return *x.StockType
	}
	return ""
}

func (x *ContractDetails) GetMinSize() string {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return ""
}

func (x *ContractDetails) GetSizeIncrement() string {
	if x != nil && x.SizeIncrement != nil {
		return *x.SizeIncrement
	}
	return ""
}

func (x *ContractDetails) GetSuggestedSizeIncrement() string {
	if x != nil && x.SuggestedSizeIncrement != nil {
		return *x.SuggestedSizeIncrement
	}
	return ""
}

func (x *ContractDetails) GetFundName() string {
	if x != nil && x.FundName != nil {
		return *x.FundName
	}
	return ""
}

func (x *ContractDetails) GetFundFamily() string {
	if x != nil && x.FundFamily != nil {
		return *x.FundFamily
	}
	return ""
}

func (x *ContractDetails) GetFundType() string {
	if x != nil && x.FundType != nil {
		return *x.FundType
	}
	return ""
}

func (x *ContractDetails) GetFundFrontLoad() string {
	if x != nil && x.FundFrontLoad != nil {
		return *x.FundFrontLoad
	}
	return ""
}

func (x *ContractDetails) GetFundBackLoad() string {
	if x != nil && x.FundBackLoad != nil {
		return *x.FundBackLoad
	}
	return ""
}

func (x *ContractDetails) GetFundBackLoadTimeInterval() string {
	if x != nil && x.FundBackLoadTimeInterval != nil {
		return *x.FundBackLoadTimeInterval
	}
	return ""
}

func (x *ContractDetails) GetFundManagementFee() string {
	if x != nil && x.FundManagementFee != nil {
		return *x.FundManagementFee
	}
	return ""
}

func (x *ContractDetails) GetFundClosed() bool {
	if x != nil && x.FundClosed != nil {
		return *x.FundClosed
	}
	return false
}

func (x *ContractDetails) GetFundClosedForNewInvestors() bool {
	if x != nil && x.FundClosedForNewInvestors != nil {
		return *x.FundClosedForNewInvestors
	}
	return false
}

func (x *ContractDetails) GetFundClosedForNewMoney() bool {
	if x != nil && x.FundClosedForNewMoney != nil {
		return *x.FundClosedForNewMoney
	}
	return false
}

func (x *ContractDetails) GetFundNotifyAmount() string {
	if x != nil && x.FundNotifyAmount != nil {
		return *x.FundNotifyAmount
	}
	return ""
}

func (x *ContractDetails) GetFundMinimumInitialPurchase() string {
	if x != nil && x.FundMinimumInitialPurchase != nil {
		return *x.FundMinimumInitialPurchase
	}
	return ""
}

func (x *ContractDetails) GetFundMinimumSubsequentPurchase() string {
	if x != nil && x.FundMinimumSubsequentPurchase != nil {
		return *x.FundMinimumSubsequentPurchase
	}
	return ""
}

func (x *ContractDetails) GetFundBlueSkyStates() string {
	if x != nil && x.FundBlueSkyStates != nil {
		return *x.FundBlueSkyStates
	}
	return ""
}

func (x *ContractDetails) GetFundBlueSkyTerritories() string {
	if x != nil && x.FundBlueSkyTerritories != nil {
		return *x.FundBlueSkyTerritories
	}
	return ""
}

func (x *ContractDetails) GetFundDistributionPolicyIndicator() string {
	if x != nil && x.FundDistributionPolicyIndicator != nil {
		return *x.FundDistributionPolicyIndicator
	}
	return ""
}

func (x *ContractDetails) GetFundAssetType() string {
	if x != nil && x.FundAssetType != nil {
		return *x.FundAssetType
	}
	return ""
}

func (x *ContractDetails) GetCusip() string {
	if x != nil && x.Cusip != nil {
		return *x.Cusip
	}
	return ""
}

func (x *ContractDetails) GetIssueDate() string {
	if x != nil && x.IssueDate != nil {
		return *x.IssueDate
	}
	return ""
}

func (x *ContractDetails) GetRatings() string {
	if x != nil && x.Ratings != nil {
		return *x.Ratings
	}
	return ""
}

func (x *ContractDetails) GetBondType() string {
	if x != nil && x.BondType != nil {
		return *x.BondType
	}
	return ""
}

func (x *ContractDetails) GetCoupon() float64 {
	if x != nil && x.Coupon != nil {
		return *x.Coupon
	}
	return 0
}

func (x *ContractDetails) GetCouponType() string {
	if x != nil && x.CouponType != nil {
		return *x.CouponType
	}
	return ""
}

func (x *ContractDetails) GetConvertible() bool {
	if x != nil && x.Convertible != nil {
		return *x.Convertible
	}
	return false
}

func (x *ContractDetails) GetCallable() bool {
	if x != nil && x.Callable != nil {
		return *x.Callable
	}
	return false
}

func (x *ContractDetails) GetPuttable() bool {
	if x != nil && x.Puttable != nil {
		return *x.Puttable
	}
	return false
}

func (x *ContractDetails) GetDescAppend() string {
	if x != nil && x.DescAppend != nil {
		return *x.DescAppend
	}
	return ""
}

func (x *ContractDetails) GetNextOptionDate() string {
	if x != nil && x.NextOptionDate != nil {
		return *x.NextOptionDate
	}
	return ""
}

func (x *ContractDetails) GetNextOptionType() string {
	if x != nil && x.NextOptionType != nil {
		return *x.NextOptionType
	}
	return ""
}

func (x *ContractDetails) GetNextOptionPartial() bool {
	if x != nil && x.NextOptionPartial != nil {
		return *x.NextOptionPartial
	}
	return false
}

func (x *ContractDetails) GetBondNotes() string {
	if x != nil && x.BondNotes != nil {
		return *x.BondNotes
	}
	return ""
}

func (x *ContractDetails) GetIneligibilityReasonList() []*IneligibilityReason {
	if x != nil {
		return x.IneligibilityReasonList
	}
	return nil
}

var File_ContractDetails_proto protoreflect.FileDescriptor

var file_ContractDetails_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x1a, 0x19, 0x49, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x1c, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x6c, 0x6f,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x76, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x65, 0x76, 0x52, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x65, 0x76, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0c, 0x65, 0x76, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x10, 0x52, 0x08, 0x61, 0x67, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12,
	0x52, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x12, 0x72, 0x65, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x66, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0d, 0x66, 0x75, 0x6e,
	0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x18, 0x66, 0x75, 0x6e, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1f, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x20,
	0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x19, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x21, 0x52, 0x19, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x22, 0x52, 0x15, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x4e, 0x65, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1a, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x1d, 0x66, 0x75,
	0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x11, 0x66, 0x75, 0x6e,
	0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b, 0x79,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x27, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b, 0x79,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x1f, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x1f, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69,
	0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x48, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x30, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x31, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x75, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x32, 0x52, 0x08, 0x70, 0x75, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34,
	0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x35, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x48, 0x36, 0x52, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x17, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x3c, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x76, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x76, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x77, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x6b,
	0x79, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x75, 0x73, 0x69, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x75, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ContractDetails_proto_rawDescOnce sync.Once
	file_ContractDetails_proto_rawDescData []byte
)

func file_ContractDetails_proto_rawDescGZIP() []byte {
	file_ContractDetails_proto_rawDescOnce.Do(func() {
		file_ContractDetails_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ContractDetails_proto_rawDesc), len(file_ContractDetails_proto_rawDesc)))
	})
	return file_ContractDetails_proto_rawDescData
}

var file_ContractDetails_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ContractDetails_proto_goTypes = []any{
	(*ContractDetails)(nil),     // 0: protobuf.ContractDetails
	nil,                         // 1: protobuf.ContractDetails.SecIdListEntry
	(*IneligibilityReason)(nil), // 2: protobuf.IneligibilityReason
}
var file_ContractDetails_proto_depIdxs = []int32{
	1, // 0: protobuf.ContractDetails.secIdList:type_name -> protobuf.ContractDetails.SecIdListEntry
	2, // 1: protobuf.ContractDetails.ineligibilityReasonList:type_name -> protobuf.IneligibilityReason
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ContractDetails_proto_init() }
func file_ContractDetails_proto_init() {
	if File_ContractDetails_proto != nil {
		return
	}
	file_IneligibilityReason_proto_init()
	file_ContractDetails_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ContractDetails_proto_rawDesc), len(file_ContractDetails_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ContractDetails_proto_goTypes,
		DependencyIndexes: file_ContractDetails_proto_depIdxs,
		MessageInfos:      file_ContractDetails_proto_msgTypes,
	}.Build()
	File_ContractDetails_proto = out.File
	file_ContractDetails_proto_goTypes = nil
	file_ContractDetails_proto_depIdxs = nil
}
